// lab1.c 
// Sihe Yang
// 10.6.2015

//Purpose: This program increments a binary display of the number of button pushes on switch 
//S0 on the mega128 board.

#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

//*******************************************************************************
//                            debounce_switch                                  
// Adapted from Ganssel's "Guide to Debouncing"            
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed. 
// Function returns a 1 only once per debounced button push so a debounce and toggle 
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
char a;

int8_t debounce_switch() {

  //static uint16_t state = 0; //holds present state
  //state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  //if (state == 0xF000) {
  //  a = 1;
  //  return 1;}
  //return 0;

  if (!(PIND & (1 << PORTD0))){ 
  a = 0x01;}           //if push S1 button
  else if (!(PIND & (1 << PORTD1))){ 
  a = 0x02;}           //if push S2 button
  else if (!(PIND & (1 << PORTD2))) {
  a = 0x04;}           //if push S3 button
  else if (!(PIND & (1 << PORTD3))) {
  a = 0x08;}           //if push S4 button
  else if (!(PIND & (1 << PORTD4))) {
  a = 0x10;}           //if push S5 button
  else if (!(PIND & (1 << PORTD5))) {
  a = 0x20;}           //if push S6 button
  else if (!(PIND & (1 << PORTD6))) {
  a = 0x40;}           //if push S7 button
  else if (!(PIND & (1 << PORTD7))) {
  a = 0x80;}           //if push S8 button


}

//*******************************************************************************
// Check switch S0.  When found low for 12 passes of "debounc_switch(), increment
// LED. Then, port B is output by using value of LED. This will make an incremen-
// ting count on the port B LEDS. 
//*******************************************************************************
int main()

{

DDRB = 0xFF;         //set prot B to all outputs

while(1){     //do forever
  if(debounce_switch()) {  //when push S1 button
      PORTB = a;             //output port B  
      _delay_ms(2);            //keep in loop to debounce 2ms
  }//if
  } //while
} //main
